pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user --entrypoint="" root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  options {
    // Clean the workspace before starting the job
    skipDefaultCheckout()
    disableConcurrentBuilds() // Ensure no concurrent builds
  }
  stages {
    stage('Clean Workspace') {
      steps {
        deleteDir() // Clean the workspace to avoid leftover data
      }
    }
    stage('Checkout') {
      steps {
        checkout scm
        sh 'echo passed'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd /var/lib/jenkins/workspace/Ultimate-automation/spring-boot-app && mvn clean package'
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "theprinceidentity/robust-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('dockerhub-credentials')
      }
      steps {
        script {
          sh 'cd Ultimate-automation/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          sh 'docker run --entrypoint="java" ${DOCKER_IMAGE} -jar app.jar' // Disable entrypoint by using a custom entrypoint
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "dockerhub-credentials") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Ultimate-automation"
        GIT_USER_NAME = "Theprince-identity"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "theprinceidentity@gmail.com"
            git config user.name "Theprince-identity"
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" Ultimate-automation/spring-boot-app-manifests/deployment.yml
            git add Ultimate-automation/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
